#%RAML 0.8
---
title: LinkedIn REST API
version: v1
baseUri: https://api.linkedin.com/{version}
resourceTypes:
  - fieldSelectors:
      usage: |
        Use this resource type when field selectors exist in resource path
      type: baseResource
      description: |
        Describes field selectors uri path parameter
      uriParameters:
        fieldSelectors:
          displayName: Field Selectors
          description: |
            Many of our resources allow you to specify what fields you want returned. We call this syntax field selectors.
            By indicating exactly the information you need, we can optimize the amount of time needed to return your results.
            It also reduces the amount of data passing across the wire. The two combine to make our APIs speedy and efficient,
            a critical factor in any web application, and more so for anyone relying on external APIs.

            Field selectors are specified after the resource identifiers and path components of a resource, prefixed by a colon,
            contained within parenthesis, and separated by commas. Fields will be returned in the order specified. When URL-encoding
            your resource URLs, ensure that the parenthesis used in selectors remain unescaped.

            Examples
            --------
            To get a member's ID, first name, last name, and industry:
              `http://api.linkedin.com/v1/people/~:(id,first-name,last-name,industry)`

            Or the same set of information for their connections:
              `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,industry)`

            Fields selectors can also be nested to access individual fields from a larger collection. For example, to get just the
            job titles and not the rest of the information about positions:
              `http://api.linkedin.com/v1/people/~/connections:(id,first-name,last-name,positions:(title))`

            Field selectors with resource identifiers allow you to request information about multiple entities at once. Specify them
            similarly, but append a double colon - here's an example getting profile information about thee members: the first is the
            current member, indicated by a tilde; the next has an id of 12345; and the last has a public profile URL

              `http://api.linkedin.com/v1/people::(~, id=12345,url=http%3A%2F%2Fwww.linkedin.com%2Fin%2Fadamnash)`
          type: string
          example: :(id,first-name,last-name,industry)
          #TODO: add validation for URI path parameter, probably pattern
  - baseResource:
      usage: |
        All LinkedIn resources should use it
      description: |
        This is base resource type described common request and response headers and error response codes
      get?: &common
        headers:
          x-li-format:
            description: |
              Type of data
            type: string
            enum: [ xml, json, jsonp ]
        responses:
          400:
            description: |
              Bad Request
            body: &errorSchemas
              text/xml:
                schema: |
                  <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <xs:element name="error">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element type="xs:short" name="status"/>
                          <xs:element type="xs:long" name="timestamp"/>
                          <xs:element type="xs:string" name="request-id"/>
                          <xs:element type="xs:byte" name="error-code"/>
                          <xs:element type="xs:string" name="message"/>
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>
                  </xs:schema>
                example: |
                  <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                  <error>
                    <status>401</status>
                    <timestamp>1378122242574</timestamp>
                    <request-id>8PQJRYO7JK</request-id>
                    <error-code>0</error-code>
                    <message>Invalid access token.</message>
                  </error>
              application/json:
                schema: |
                  {
                      "type":"object",
                      "$schema": "http://json-schema.org/draft-03/schema",
                      "id": "http://jsonschema.net",
                      "required":false,
                      "properties":{
                          "errorCode": {
                              "type":"number",
                              "id": "http://jsonschema.net/errorCode",
                              "required":false
                          },
                          "message": {
                              "type":"string",
                              "id": "http://jsonschema.net/message",
                              "required":false
                          },
                          "requestId": {
                              "type":"string",
                              "id": "http://jsonschema.net/requestId",
                              "required":false
                          },
                          "status": {
                              "type":"number",
                              "id": "http://jsonschema.net/status",
                              "required":false
                          },
                          "timestamp": {
                              "type":"number",
                              "id": "http://jsonschema.net/timestamp",
                              "required":false
                          }
                      }
                  }
                example: |
                  {
                    "errorCode": 0,
                    "message": "Invalid access token.",
                    "requestId": "Y703T8HXBF",
                    "status": 401,
                    "timestamp": 1378122137646
                  }
              application/javascript:
                # schema: TODO ???
                example: |
                  callback({
                    "errorCode": 0,
                    "message": "Invalid access token.",
                    "requestId": "3W65MK0G8R",
                    "status": 401,
                    "timestamp": 1378120873591
                  })
          401:
            description: |
              Unauthorized
            body: *errorSchemas
          403:
            description: |
              Forbidden
            body: *errorSchemas
          503:
            description: |
              Service Unavailable
            body: *errorSchemas
      put?: *common
      post?: *common
      delete?: *common
traits:
  - secureUrlParam:
      description: |
        This trait should be used for indicate that you want the URLs in your response to be HTTPS
      queryParameters:
        secure-urls:
          description: |
            secure-urls query parameter indicates that you want the URLs in your response to be HTTPS
          type: boolean
securitySchemes:
  - oauth_2_0:
      description: |
        LinkedIn supports OAuth 2.0 for authenticating all API requests.
      type: OAuth 2.0
      describedBy:
        queryParameters:
          oauth2_access_token:
            description: |
              Used to send a valid OAuth 2 access token
            type: string
      settings:
        authorizationUri: https://www.linkedin.com/uas/oauth2/authorization
        accessTokenUri: https://www.linkedin.com/uas/oauth2/accessToken
        authorizationGrants: code
  - oauth_1_0:
      description: |
        OAuth 1.0 continues to be supported for all API requests, but OAuth 2.0 is now preferred.
      type: OAuth 1.0
      settings:
        requestTokenUri: https://api.linkedin.com/uas/oauth/requestToken
        authorizationUri: https//www.linkedin.com/uas/oauth/authenticate
        tokenCredentialsUri: https://api.linkedin.com/uas/oauth/accessToken
securedBy: [oauth_2_0, oauth_1_0]
/people:
  displayName: People
  /~{fieldSelectors}:
    displayName: Profile API
    type: fieldSelectors
    get:
      is: [secureUrlParam]
      description: |
        Returns profile of the current user
      responses:
        200:
          body:
            text/xml:
              schema: |
                <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <xs:element name="person">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:element type="xs:int" name="id"/>
                        <xs:element type="xs:string" name="first-name"/>
                        <xs:element type="xs:string" name="last-name"/>
                        <xs:element type="xs:string" name="headline"/>
                        <xs:element name="location">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element type="xs:string" name="name"/>
                              <xs:element name="country">
                                <xs:complexType>
                                  <xs:sequence>
                                    <xs:element type="xs:short" name="code"/>
                                  </xs:sequence>
                                </xs:complexType>
                              </xs:element>
                            </xs:sequence>
                          </xs:complexType>
                        </xs:element>
                        <xs:element type="xs:string" name="industry"/>
                        <xs:element type="xs:byte" name="distance"/>
                        <xs:element name="relation-to-viewer">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element type="xs:byte" name="distance"/>
                            </xs:sequence>
                          </xs:complexType>
                        </xs:element>
                        <xs:element type="xs:byte" name="num-recommenders"/>
                        <xs:element type="xs:string" name="current-status"/>
                        <xs:element type="xs:long" name="current-status-timestamp"/>
                        <xs:element name="connections">
                          <xs:complexType>
                            <xs:simpleContent>
                              <xs:extension base="xs:string">
                                <xs:attribute type="xs:byte" name="total"/>
                              </xs:extension>
                            </xs:simpleContent>
                          </xs:complexType>
                        </xs:element>
                        <xs:element type="xs:string" name="summary"/>
                        <xs:element name="positions">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element name="position" maxOccurs="unbounded" minOccurs="0">
                                <xs:complexType>
                                  <xs:sequence>
                                    <xs:element type="xs:string" name="id"/>
                                    <xs:element type="xs:string" name="title"/>
                                    <xs:element type="xs:string" name="summary"/>
                                    <xs:element name="start-date">
                                      <xs:complexType>
                                        <xs:sequence>
                                          <xs:element type="xs:short" name="year"/>
                                          <xs:element type="xs:string" name="month"/>
                                        </xs:sequence>
                                      </xs:complexType>
                                    </xs:element>
                                    <xs:element type="xs:string" name="is-current"/>
                                    <xs:element name="company">
                                      <xs:complexType>
                                        <xs:sequence>
                                          <xs:element type="xs:string" name="name"/>
                                        </xs:sequence>
                                      </xs:complexType>
                                    </xs:element>
                                  </xs:sequence>
                                </xs:complexType>
                              </xs:element>
                            </xs:sequence>
                            <xs:attribute type="xs:byte" name="total"/>
                          </xs:complexType>
                        </xs:element>
                        <xs:element name="educations">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element name="education" maxOccurs="unbounded" minOccurs="0">
                                <xs:complexType>
                                  <xs:sequence>
                                    <xs:element type="xs:string" name="id"/>
                                    <xs:element type="xs:string" name="school-name"/>
                                    <xs:element type="xs:string" name="degree"/>
                                    <xs:element name="start-date">
                                      <xs:complexType>
                                        <xs:sequence>
                                          <xs:element type="xs:short" name="year"/>
                                        </xs:sequence>
                                      </xs:complexType>
                                    </xs:element>
                                    <xs:element name="end-date">
                                      <xs:complexType>
                                        <xs:sequence>
                                          <xs:element type="xs:short" name="year"/>
                                        </xs:sequence>
                                      </xs:complexType>
                                    </xs:element>
                                  </xs:sequence>
                                </xs:complexType>
                              </xs:element>
                            </xs:sequence>
                            <xs:attribute type="xs:byte" name="total"/>
                          </xs:complexType>
                        </xs:element>
                        <xs:element name="member-url-resources">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element name="member-url" maxOccurs="unbounded" minOccurs="0">
                                <xs:complexType>
                                  <xs:sequence>
                                    <xs:element type="xs:anyURI" name="url"/>
                                    <xs:element type="xs:string" name="name"/>
                                  </xs:sequence>
                                </xs:complexType>
                              </xs:element>
                            </xs:sequence>
                          </xs:complexType>
                        </xs:element>
                        <xs:element name="api-standard-profile-request">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element type="xs:anyURI" name="url"/>
                              <xs:element name="headers">
                                <xs:complexType>
                                  <xs:sequence>
                                    <xs:element name="http-header" maxOccurs="unbounded" minOccurs="0">
                                      <xs:complexType>
                                        <xs:sequence>
                                          <xs:element type="xs:string" name="name"/>
                                          <xs:element type="xs:string" name="value"/>
                                        </xs:sequence>
                                      </xs:complexType>
                                    </xs:element>
                                  </xs:sequence>
                                </xs:complexType>
                              </xs:element>
                            </xs:sequence>
                          </xs:complexType>
                        </xs:element>
                        <xs:element name="site-standard-profile-request">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element type="xs:anyURI" name="url"/>
                            </xs:sequence>
                          </xs:complexType>
                        </xs:element>
                        <xs:element type="xs:anyURI" name="picture-url"/>
                      </xs:sequence>
                    </xs:complexType>
                  </xs:element>
                </xs:schema>
              example: |
                <person>
                  <id>123456</id>
                  <first-name>first name</first-name>
                  <last-name>last name</last-name>
                  <headline>headline</headline>
                  <location>
                    <name>name</name>
                    <country>
                      <code>804</code>
                    </country>
                  </location>
                  <industry>industry</industry>
                  <distance>50</distance>
                  <relation-to-viewer>
                    <distance>100</distance>
                  </relation-to-viewer>
                  <num-recommenders>10</num-recommenders>
                  <current-status>online</current-status>
                  <current-status-timestamp>12367123678</current-status-timestamp>
                  <connections total="10" />
                  <summary>summary</summary>
                  <positions total="2">
                    <position>
                      <id>id1</id>
                      <title>title1</title>
                      <summary>summary1</summary>
                      <start-date>
                        <year>2013</year>
                        <month>Jan</month>
                      </start-date>
                      <is-current>false</is-current>
                      <company>
                        <name>Company1</name>
                      </company>
                    </position>
                    <position>
                      <id>id2</id>
                      <title>title2</title>
                      <summary>summary2</summary>
                      <start-date>
                        <year>2013</year>
                        <month>Jun</month>
                      </start-date>
                      <is-current>true</is-current>
                      <company>
                        <name>Company2</name>
                      </company>
                    </position>
                  </positions>
                  <educations total="2">
                    <education>
                      <id>id1</id>
                      <school-name>school1</school-name>
                      <degree>degree1</degree>
                      <start-date>
                        <year>2000</year>
                      </start-date>
                      <end-date>
                        <year>2008</year>
                      </end-date>
                    </education>
                    <education>
                      <id>id2</id>
                      <school-name>university1</school-name>
                      <degree>degree2</degree>
                      <start-date>
                        <year>2008</year>
                      </start-date>
                      <end-date>
                        <year>2013</year>
                      </end-date>
                    </education>
                  </educations>
                  <member-url-resources>
                    <member-url>
                      <url>http://url1</url>
                      <name>name of url1</name>
                    </member-url>
                    <member-url>
                      <url>http://url2</url>
                      <name>name of url2</name>
                    </member-url>
                  </member-url-resources>
                  <api-standard-profile-request>
                    <url>http://url.com</url>
                    <headers>
                      <http-header>
                        <name>Date</name>
                        <value>237423472sdf</value>
                      </http-header>
                      <http-header>
                        <name>Acept-type</name>
                        <value>*/*</value>
                      </http-header>
                    </headers>
                  </api-standard-profile-request>
                  <site-standard-profile-request>
                    <url>http://url.com</url>
                  </site-standard-profile-request>
                  <picture-url>http://picture.url</picture-url>
                </person>
            application/json:
              schema: |
                {
                    "type":"object",
                    "$schema": "http://json-schema.org/draft-03/schema",
                    "id": "http://jsonschema.net",
                    "required":false,
                    "properties":{
                        "firstName": {
                            "type":"string",
                            "id": "http://jsonschema.net/firstName",
                            "required":false
                        },
                        "headline": {
                            "type":"string",
                            "id": "http://jsonschema.net/headline",
                            "required":false
                        },
                        "lastName": {
                            "type":"string",
                            "id": "http://jsonschema.net/lastName",
                            "required":false
                        },
                        "siteStandardProfileRequest": {
                            "type":"object",
                            "id": "http://jsonschema.net/siteStandardProfileRequest",
                            "required":false,
                            "properties":{
                                "url": {
                                    "type":"string",
                                    "id": "http://jsonschema.net/siteStandardProfileRequest/url",
                                    "required":false
                                }
                            }
                        }
                    }
                }
              example: |
                {
                  "firstName": "First Name",
                  "headline": "developer",
                  "lastName": "Last Name",
                  "siteStandardProfileRequest": {"url": "http://www.linkedin.com/profile/view?id=283834265"}
                }
    /connections{fieldSelectors} :
      displayName: Connections API
      type: fieldSelectors
      get:
        description: |
          Returns a list of 1st degree connections for a user who has granted access to his/her account
        queryParameters:
          start:
            description: |
              Starting location within the result set for paginated returns. Ranges are specified with a starting index and a
              number of results (count) to return.
            type: integer
            minimum: 0
            default: 0
          count:
            description: |
              Ranges are specified with a starting index and a number of results to return. You may specify any number.
              Default and max page size is 500. Implement pagination to retrieve more than 500 connections.
            type: integer
            minimum: 1
            maximum: 500
            default: 500
          modified:
            description: |
              Values are updated or new.
            type: string
            enum: [ updated, new ]
          modified-since:
            description: |
              Value as a Unix time stamp of milliseconds since epoch.
            type: integer
            minimum: 0
            example: 1267401600000
        responses:
          200:
            body:
              text/xml:
                schema: |
                  <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <xs:element name="connections">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element name="person">
                            <xs:complexType>
                              <xs:sequence>
                                <xs:element type="xs:string" name="id"/>
                                <xs:element type="xs:string" name="first-name"/>
                                <xs:element type="xs:string" name="last-name"/>
                                <xs:element type="xs:string" name="headline"/>
                                <xs:element name="location">
                                  <xs:complexType>
                                    <xs:sequence>
                                      <xs:element type="xs:string" name="name"/>
                                      <xs:element name="country">
                                        <xs:complexType>
                                          <xs:sequence>
                                            <xs:element type="xs:short" name="code"/>
                                          </xs:sequence>
                                        </xs:complexType>
                                      </xs:element>
                                    </xs:sequence>
                                  </xs:complexType>
                                </xs:element>
                                <xs:element type="xs:string" name="industry"/>
                                <xs:element name="api-standard-profile-request">
                                  <xs:complexType>
                                    <xs:sequence>
                                      <xs:element type="xs:anyURI" name="url"/>
                                      <xs:element name="headers">
                                        <xs:complexType>
                                          <xs:sequence>
                                            <xs:element name="http-header">
                                              <xs:complexType>
                                                <xs:sequence>
                                                  <xs:element type="xs:string" name="name"/>
                                                  <xs:element type="xs:string" name="value"/>
                                                </xs:sequence>
                                              </xs:complexType>
                                            </xs:element>
                                          </xs:sequence>
                                        </xs:complexType>
                                      </xs:element>
                                    </xs:sequence>
                                  </xs:complexType>
                                </xs:element>
                                <xs:element name="site-standard-profile-request">
                                  <xs:complexType>
                                    <xs:sequence>
                                      <xs:element type="xs:anyURI" name="url"/>
                                    </xs:sequence>
                                  </xs:complexType>
                                </xs:element>
                                <xs:element type="xs:anyURI" name="picture-url"/>
                              </xs:sequence>
                            </xs:complexType>
                          </xs:element>
                        </xs:sequence>
                        <xs:attribute type="xs:short" name="total"/>
                      </xs:complexType>
                    </xs:element>
                  </xs:schema>
                example: |
                  <?xml version='1.0' encoding='UTF-8' standalone='yes'?>
                  <connections total='154'>
                    <person>
                      <id>id</id>
                      <first-name>first name</first-name>
                      <last-name>last name</last-name>
                      <headline>head line</headline>
                      <location>
                        <name>location name</name>
                        <country>
                          <code>804</code>
                        </country>
                      </location>
                      <industry>industry</industry>
                      <api-standard-profile-request>
                        <url>http://profile.linkedin.com</url>
                        <headers>
                          <http-header>
                            <name>Content-Type</name>
                            <value>plain/text</value>
                          </http-header>
                        </headers>
                      </api-standard-profile-request>
                      <site-standard-profile-request>
                        <url>http://profile.linkedin.com</url>
                      </site-standard-profile-request>
                      <picture-url>http://photo.profile.linkedin.com</picture-url>
                    </person>
                  </connections>
              application/json:
                schema: |
                example: |
    /group-memberships{fieldSelectors}:
      displayName: Groups API
      type: fieldSelectors
      get:
        description: |
          Returns Group Memberships for a User
        queryParameters:
          count:
            description: |
              Number of records to return.
            type: integer
            default: 5
          start:
            description: |
              Record index at which to start pagination.
            type: integer
            default: 0
          membership-state:
            description: |
              The state of the caller’s membership to the specified group. Use the value member to retrieve the groups to which a
              user belongs.
            type: string
            enum: [ non-member, awaiting-confirmation, awaiting-parent-group-confirmation, member, moderator, manager, owner ]
        responses:
          200:
            body:
              text/xml:
                schema: |
                  <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <xs:element name="group-membership">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element name="group">
                            <xs:complexType>
                              <xs:sequence>
                                <xs:element type="xs:int" name="id"/>
                                <xs:element type="xs:string" name="name"/>
                              </xs:sequence>
                            </xs:complexType>
                          </xs:element>
                          <xs:element type="xs:string" name="show-group-logo-in-profile"/>
                          <xs:element name="email-digest-frequency">
                            <xs:complexType>
                              <xs:sequence>
                                <xs:element type="xs:string" name="code"/>
                              </xs:sequence>
                            </xs:complexType>
                          </xs:element>
                          <xs:element type="xs:string" name="email-announcements-from-managers"/>
                          <xs:element type="xs:string" name="allow-messages-from-members"/>
                          <xs:element type="xs:string" name="email-for-every-new-post"/>
                          <xs:element name="membership-state">
                            <xs:complexType>
                              <xs:sequence>
                                <xs:element type="xs:string" name="code"/>
                              </xs:sequence>
                            </xs:complexType>
                          </xs:element>
                        </xs:sequence>
                      </xs:complexType>
                    </xs:element>
                  </xs:schema>
                example: |
                  <?xml version='1.0' encoding='UTF-8' standalone='yes'?>
                  <group-membership>
                    <group>
                      <id>32423423</id>
                    </group>
                    <show-group-logo-in-profile>true</show-group-logo-in-profile>
                    <email-digest-frequency>
                      <code>daily</code>
                    </email-digest-frequency>
                    <email-announcements-from-managers>true</email-announcements-from-managers>
                    <allow-messages-from-members>true</allow-messages-from-members>
                    <email-for-every-new-post>false</email-for-every-new-post>
                    <membership-state>
                      <code>member</code>
                    </membership-state>
                  </group-membership>
              application/json:
                schema: |
                example: |
      post:
        description: |
          POSTs additional group settings information
        body:
          text/xml:
            schema: |
              <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <xs:element name="group-membership">
                  <xs:complexType>
                    <xs:sequence>
                      <xs:element name="group">
                        <xs:complexType>
                          <xs:sequence>
                            <xs:element type="xs:int" name="id"/>
                            <xs:element type="xs:string" name="name"/>
                          </xs:sequence>
                        </xs:complexType>
                      </xs:element>
                      <xs:element type="xs:string" name="show-group-logo-in-profile"/>
                      <xs:element name="email-digest-frequency">
                        <xs:complexType>
                          <xs:sequence>
                            <xs:element type="xs:string" name="code"/>
                          </xs:sequence>
                        </xs:complexType>
                      </xs:element>
                      <xs:element type="xs:string" name="email-announcements-from-managers"/>
                      <xs:element type="xs:string" name="allow-messages-from-members"/>
                      <xs:element type="xs:string" name="email-for-every-new-post"/>
                      <xs:element name="membership-state">
                        <xs:complexType>
                          <xs:sequence>
                            <xs:element type="xs:string" name="code"/>
                          </xs:sequence>
                        </xs:complexType>
                      </xs:element>
                    </xs:sequence>
                  </xs:complexType>
                </xs:element>
              </xs:schema>
            example: |
              <?xml version='1.0' encoding='UTF-8' standalone='yes'?>
              <group-membership>
                <group>
                  <id>32423423</id>
                </group>
                <show-group-logo-in-profile>true</show-group-logo-in-profile>
                <email-digest-frequency>
                  <code>daily</code>
                </email-digest-frequency>
                <email-announcements-from-managers>true</email-announcements-from-managers>
                <allow-messages-from-members>true</allow-messages-from-members>
                <email-for-every-new-post>false</email-for-every-new-post>
                <membership-state>
                  <code>member</code>
                </membership-state>
              </group-membership>
          application/json:
            schema: |
            example: |
        responses:
          200:
            description: OK
      /{groupId}{fieldSelectors}:
        displayName: Groups API
        type: fieldSelectors
        uriParameters:
          groupId:
            displayName: Numeric group ID
            description: |
              The unique identifier for a LinkedIn group
            type: integer
            required: true
        get:
          description: |
            Returns Group settings
          queryParameters:
            membership-state:
              description: |
                The state of the caller’s membership to the specified group. Use the value member to retrieve the groups to which a
                user belongs.
              type: string
              enum: [ non-member, awaiting-confirmation, awaiting-parent-group-confirmation, member, moderator, manager, owner ]
          responses:
            200:
              body:
                text/xml:
                  schema: |
                    <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <xs:element name="group-membership">
                        <xs:complexType>
                          <xs:sequence>
                            <xs:element type="xs:string" name="show-group-logo-in-profile"/>
                            <xs:element name="email-digest-frequency">
                              <xs:complexType>
                                <xs:sequence>
                                  <xs:element type="xs:string" name="code"/>
                                </xs:sequence>
                              </xs:complexType>
                            </xs:element>
                            <xs:element type="xs:string" name="email-announcements-from-managers"/>
                            <xs:element type="xs:string" name="allow-messages-from-members"/>
                            <xs:element type="xs:string" name="email-for-every-new-post"/>
                          </xs:sequence>
                        </xs:complexType>
                      </xs:element>
                    </xs:schema>
                  example: |
                    <?xml version='1.0' encoding='UTF-8' standalone='yes'?>
                    <group-membership>
                      <show-group-logo-in-profile>true</show-group-logo-in-profile>
                      <email-digest-frequency>
                        <code>daily</code>
                      </email-digest-frequency>
                      <email-announcements-from-managers>true</email-announcements-from-managers>
                      <allow-messages-from-members>true</allow-messages-from-members>
                      <email-for-every-new-post>true</email-for-every-new-post>
                    </group-membership>
                application/json:
                  schema: |
                  example: |
        put:
          description: |
            Change Group settings
          body:
            text/xml:
              schema: |
                <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <xs:element name="group-membership">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:element type="xs:string" name="show-group-logo-in-profile"/>
                        <xs:element name="email-digest-frequency">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element type="xs:string" name="code"/>
                            </xs:sequence>
                          </xs:complexType>
                        </xs:element>
                        <xs:element type="xs:string" name="email-announcements-from-managers"/>
                        <xs:element type="xs:string" name="allow-messages-from-members"/>
                        <xs:element type="xs:string" name="email-for-every-new-post"/>
                      </xs:sequence>
                    </xs:complexType>
                  </xs:element>
                </xs:schema>
              example: |
                <?xml version='1.0' encoding='UTF-8' standalone='yes'?>
                <group-membership>
                  <show-group-logo-in-profile>true</show-group-logo-in-profile>
                  <email-digest-frequency>
                    <code>daily</code>
                  </email-digest-frequency>
                  <email-announcements-from-managers>true</email-announcements-from-managers>
                  <allow-messages-from-members>true</allow-messages-from-members>
                  <email-for-every-new-post>true</email-for-every-new-post>
                </group-membership>
            application/json:
              schema: |
              example: |
          responses:
            200:
              description: OK
        delete:
          description: Leave a Group
          responses:
            200:
              description: OK
        /posts{fieldSelectors}:
          type: fieldSelectors
          get:
            description: |
              Returns a Group's Discussion Posts
            queryParameters:
              count:
                description: |
                  Number of records to return. Supported for posts and post/comments.
                type: integer
                minimum: 0
              start:
                description: |
                  Record index to start pagination. Supported for posts and post/comments.
                type: integer
                minimum: 0
                default: 0
              order:
                description: |
                  Sort order for posts.
                type: string
                enum: [ recency, popularity ]
              role:
                description: |
                  Filter for posts related to the caller. Valid only for group-memberships/{id}/posts resource.
                type: string
                enum: [ creator, commenter, follower ]
                required: true
              category:
                description: |
                  Category of posts.
                type: string
                enum: [ discussion ]
              modified-since:
                description: |
                  Timestamp filter for posts created after the specified value.
                type: integer
                example: 1302727083000
            responses:
              200:
                body:
                  text/xml:
                    schema: |
                      <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                        <xs:element name="posts">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element name="post">
                                <xs:complexType>
                                  <xs:sequence>
                                    <xs:element type="xs:string" name="id"/>
                                    <xs:element name="type">
                                      <xs:complexType>
                                        <xs:sequence>
                                          <xs:element type="xs:string" name="code"/>
                                        </xs:sequence>
                                      </xs:complexType>
                                    </xs:element>
                                    <xs:element name="creator">
                                      <xs:complexType>
                                        <xs:sequence>
                                          <xs:element type="xs:string" name="id"/>
                                          <xs:element type="xs:string" name="first-name"/>
                                          <xs:element type="xs:string" name="last-name"/>
                                          <xs:element type="xs:string" name="headline"/>
                                        </xs:sequence>
                                      </xs:complexType>
                                    </xs:element>
                                    <xs:element type="xs:string" name="title"/>
                                  </xs:sequence>
                                </xs:complexType>
                              </xs:element>
                            </xs:sequence>
                            <xs:attribute type="xs:byte" name="total"/>
                          </xs:complexType>
                        </xs:element>
                      </xs:schema>
                    example: |
                      <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                      <posts total="1">
                        <post>
                          <id>g-5161023-S-270459579</id>
                          <type>
                            <code>standard</code>
                          </type>
                          <creator>
                            <id>AGBKeo0Eup</id>
                            <first-name>first name</first-name>
                            <last-name>second name</last-name>
                            <headline>developer</headline>
                          </creator>
                          <title>first message</title>
                        </post>
                      </posts>
                  application/json:
                    schema: |
                    example: |
    /suggestions:
      displayName: Groups API
      /groups{fieldSelectors}:
        type: fieldSelectors
        get:
          description: |
            Get Suggested Groups for a User
          responses:
            200:
              body:
                text/xml:
                  schema: |
                  example: |
                application/json:
                  schema: |
                  example: |
        /{groupId}:
          type: baseResource
          uriParameters:
            groupId:
              displayName: Numeric group ID
              description: |
                The unique identifier for a LinkedIn group
              type: integer
              required: true
          delete:
            description: |
              Remove a Group Suggestion for a Use
            responses:
                200:
                  description: OK
      /job-suggestions{fieldSelectors}:
        type: fieldSelectors
        get:
          description: |
            Retrieving a List of a Member’s Suggested Jobs
          responses:
            200:
              body:
                text/xml:
                  schema: |
                    <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                      <xs:element name="job-suggestions">
                        <xs:complexType>
                          <xs:sequence>
                            <xs:element name="jobs">
                              <xs:complexType>
                                <xs:sequence>
                                  <xs:element name="job" maxOccurs="unbounded" minOccurs="0">
                                    <xs:complexType>
                                      <xs:sequence>
                                        <xs:element type="xs:int" name="id"/>
                                        <xs:element name="company">
                                          <xs:complexType mixed="true">
                                            <xs:sequence>
                                              <xs:element type="xs:short" name="id" minOccurs="0"/>
                                              <xs:element type="xs:string" name="name" minOccurs="0"/>
                                            </xs:sequence>
                                          </xs:complexType>
                                        </xs:element>
                                        <xs:element type="xs:string" name="salary" minOccurs="0"/>
                                        <xs:element name="job-poster">
                                          <xs:complexType>
                                            <xs:sequence>
                                              <xs:element type="xs:string" name="id"/>
                                              <xs:element type="xs:string" name="first-name"/>
                                              <xs:element type="xs:string" name="last-name"/>
                                              <xs:element type="xs:string" name="headline"/>
                                            </xs:sequence>
                                          </xs:complexType>
                                        </xs:element>
                                        <xs:element type="xs:string" name="description-snippet"/>
                                        <xs:element type="xs:string" name="location-description"/>
                                      </xs:sequence>
                                    </xs:complexType>
                                  </xs:element>
                                </xs:sequence>
                                <xs:attribute type="xs:byte" name="total"/>
                                <xs:attribute type="xs:byte" name="count"/>
                                <xs:attribute type="xs:byte" name="start"/>
                              </xs:complexType>
                            </xs:element>
                          </xs:sequence>
                        </xs:complexType>
                      </xs:element>
                    </xs:schema>
                  example: |
                    <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                    <job-suggestions>
                      <jobs total="50" count="10" start="0">
                        <job>
                          <id>1577323</id>
                          <company>
                            <id>1281</id>
                            <name>Unisys</name>
                          </company>
                          <job-poster>
                            <id>OHYinXGMKT</id>
                            <first-name>Joanne</first-name>
                            <last-name>Rawls</last-name>
                            <headline>Recruiting Lead at Unisys Corporation</headline>
                          </job-poster>
                          <description-snippet>Unisys is expanding our Federal Proposal Development Center and looking for talented professionals to join our team. As a Senior Technical Writer, you will be responsible for: • Analyzing Request for Proposals (RFP) and work with Solution Architects to package company services into a technical proposal response; write technical proposals that spell out what the company can offer to the agency seek</description-snippet>
                          <location-description>Reston, VA  </location-description>
                        </job>
                        <job>
                          <id>1579926</id>
                          <company>
                            <id>15759</id>
                            <name>Velti</name>
                          </company>
                          <salary>Negotiable</salary>
                          <job-poster>
                            <id>UlfGF2nmYN</id>
                            <first-name>Maria</first-name>
                            <last-name>Maragoudakis-Gregoriou</last-name>
                            <headline>Experienced Business Manager with extensive international and start-up experience</headline>
                          </job-poster>
                          <description-snippet>Senior Technical Writer (Job Code: SF-SRTCR) Velti is a leading global provider of mobile marketing and advertising software solutions that enable brands, advertising agencies, mobile operators, and media companies to implement highly targeted, interactive, and measurable campaigns by communicating with and engaging consumers via their mobile devices. Job DescriptionThe Senior Technical Writer pos</description-snippet>
                          <location-description>San Francisco</location-description>
                        </job>
                        <job>
                          <id>1609091</id>
                          <company>
                          </company>
                          <salary>Annual Salary, Bonus</salary>
                          <job-poster>
                            <id>VLhDZNHMmG</id>
                            <first-name>Ties</first-name>
                            <last-name>van de Voort</last-name>
                            <headline>International Corporate Recruiter at SDL Tridion</headline>
                          </job-poster>
                          <description-snippet>The Senior Technical Support Engineer works in a team of support engineers and reports to the Manager Customer Support. The Senior Technical Support Engineer is guarding and meeting service levels as agreed with customers, partners and the internal organization. The Senior Technical Support Engineer independently provides complex technical support to customers and partners, provides onsite support</description-snippet>
                          <location-description>New York</location-description>
                        </job>
                     </jobs>
                    </job-suggestions>
                application/json:
                  schema: |
                  example: |
    /job-bookmarks:
      displayName: Job Bookmarks and Suggestions API
      type: baseResource
      get:
        description: |
          Returns Job Bookmarks
        responses:
          200:
            body:
              text/xml:
                schema: |
                  <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <xs:element name="job-bookmarks">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element name="job-bookmark" maxOccurs="unbounded" minOccurs="0">
                            <xs:complexType>
                              <xs:sequence>
                                <xs:element type="xs:string" name="is-applied"/>
                                <xs:element type="xs:string" name="is-saved"/>
                                <xs:element type="xs:long" name="saved-timestamp"/>
                                <xs:element name="job">
                                  <xs:complexType>
                                    <xs:sequence>
                                      <xs:element type="xs:int" name="id"/>
                                      <xs:element type="xs:string" name="active"/>
                                      <xs:element name="company">
                                        <xs:complexType>
                                          <xs:sequence>
                                            <xs:element type="xs:int" name="id"/>
                                            <xs:element type="xs:string" name="name"/>
                                          </xs:sequence>
                                        </xs:complexType>
                                      </xs:element>
                                      <xs:element name="position">
                                        <xs:complexType>
                                          <xs:sequence>
                                            <xs:element type="xs:string" name="title"/>
                                          </xs:sequence>
                                        </xs:complexType>
                                      </xs:element>
                                      <xs:element type="xs:string" name="description-snippet"/>
                                      <xs:element type="xs:long" name="posting-timestamp"/>
                                    </xs:sequence>
                                  </xs:complexType>
                                </xs:element>
                              </xs:sequence>
                            </xs:complexType>
                          </xs:element>
                        </xs:sequence>
                        <xs:attribute type="xs:byte" name="total"/>
                      </xs:complexType>
                    </xs:element>
                  </xs:schema>
                example: |
                  <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                  <job-bookmarks total="2">
                    <job-bookmark>
                      <is-applied>false</is-applied>
                      <is-saved>true</is-saved>
                      <saved-timestamp>1306261147000</saved-timestamp>
                      <job>
                        <id>1641165</id>
                        <active>true</active>
                        <company>
                          <id>35876</id>
                          <name>ClairMail</name>
                        </company>
                        <position>
                          <title>Senior Technical Writer</title>
                        </position>
                        <description-snippet>The Technical Writer will be responsible for creating, maintaining and
                  updating documentation, including internal and external facing technical documentation of ClairMail software,
                  such as user guides, installation guides, configuration guides, and developer’s guides. The products are
                  enterprise software products and the audience is technical, so the candidate must be able to understand highly tec</description-snippet>
                        <posting-timestamp>1306256696000</posting-timestamp>
                      </job>
                    </job-bookmark>
                    <job-bookmark>
                      <is-applied>false</is-applied>
                      <is-saved>true</is-saved>
                      <saved-timestamp>1306261165000</saved-timestamp>
                      <job>
                        <id>1578133</id>
                        <active>true</active>
                        <company>
                          <id>26909</id>
                          <name>Greenplum</name>
                        </company>
                        <position>
                          <title>Senior Manager Technical Publications</title>
                        </position>
                        <description-snippet>Greenplum is seeking an experienced Senior Manager, Technical Publications to
                  support its worldwide technical content demand and generation efforts.  The Senior Manager will report to the
                  Vice-President of Engineering, and will be responsible for developing work plans, establishing technical and
                  other functional objectives, assigning tasks, and managing groups/teams. Maintains schedules and coordi</description-snippet>
                        <posting-timestamp>1303854887000</posting-timestamp>
                      </job>
                    </job-bookmark>
                  </job-bookmarks>
              application/json:
                schema: |
                example: |
      post:
        description: |
          Bookmarking a Job
        body:
          text/xml:
            schema: |
            example: |
          application/json:
            schema: |
            example: |
        responses:
          200:
            description: OK
      /{jobId}:
        type: baseResource
        uriParameters:
          jobId:
            displayName: Job ID
            description: |
              The unique identifier for a job.
            type: string
            required: true
        delete:
          description: |
            Deleting a Job Bookmark
          responses:
            200:
              description: OK
  /id={peopleId}{fieldSelectors}:
    displayName: Profile API
    type: fieldSelectors
    uriParameters:
      peopleId:
        displayName: Profile ID
        type: string
        required: true
    get:
      is: [secureUrlParam]
      description: |
        Returns profile of user by ID
      responses:
        200:
          body:
            text/xml:
              schema: |
                <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <xs:element name="person">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:element type="xs:int" name="id"/>
                        <xs:element type="xs:string" name="first-name"/>
                        <xs:element type="xs:string" name="last-name"/>
                        <xs:element type="xs:string" name="headline"/>
                        <xs:element name="location">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element type="xs:string" name="name"/>
                              <xs:element name="country">
                                <xs:complexType>
                                  <xs:sequence>
                                    <xs:element type="xs:short" name="code"/>
                                  </xs:sequence>
                                </xs:complexType>
                              </xs:element>
                            </xs:sequence>
                          </xs:complexType>
                        </xs:element>
                        <xs:element type="xs:string" name="industry"/>
                        <xs:element type="xs:byte" name="distance"/>
                        <xs:element type="xs:byte" name="num-recommenders"/>
                        <xs:element type="xs:string" name="current-status"/>
                        <xs:element type="xs:long" name="current-status-timestamp"/>
                        <xs:element name="connections">
                          <xs:complexType>
                            <xs:simpleContent>
                              <xs:extension base="xs:string">
                                <xs:attribute type="xs:byte" name="total"/>
                              </xs:extension>
                            </xs:simpleContent>
                          </xs:complexType>
                        </xs:element>
                        <xs:element type="xs:string" name="summary"/>
                        <xs:element name="positions">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element name="position" maxOccurs="unbounded" minOccurs="0">
                                <xs:complexType>
                                  <xs:sequence>
                                    <xs:element type="xs:string" name="id"/>
                                    <xs:element type="xs:string" name="title"/>
                                    <xs:element type="xs:string" name="summary"/>
                                    <xs:element name="start-date">
                                      <xs:complexType>
                                        <xs:sequence>
                                          <xs:element type="xs:short" name="year"/>
                                          <xs:element type="xs:string" name="month"/>
                                        </xs:sequence>
                                      </xs:complexType>
                                    </xs:element>
                                    <xs:element type="xs:string" name="is-current"/>
                                    <xs:element name="company">
                                      <xs:complexType>
                                        <xs:sequence>
                                          <xs:element type="xs:string" name="name"/>
                                        </xs:sequence>
                                      </xs:complexType>
                                    </xs:element>
                                  </xs:sequence>
                                </xs:complexType>
                              </xs:element>
                            </xs:sequence>
                            <xs:attribute type="xs:byte" name="total"/>
                          </xs:complexType>
                        </xs:element>
                        <xs:element name="member-url-resources">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element name="member-url" maxOccurs="unbounded" minOccurs="0">
                                <xs:complexType>
                                  <xs:sequence>
                                    <xs:element type="xs:anyURI" name="url"/>
                                    <xs:element type="xs:string" name="name"/>
                                  </xs:sequence>
                                </xs:complexType>
                              </xs:element>
                            </xs:sequence>
                          </xs:complexType>
                        </xs:element>
                        <xs:element name="api-standard-profile-request">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element type="xs:anyURI" name="url"/>
                              <xs:element name="headers">
                                <xs:complexType>
                                  <xs:sequence>
                                    <xs:element name="http-header" maxOccurs="unbounded" minOccurs="0">
                                      <xs:complexType>
                                        <xs:sequence>
                                          <xs:element type="xs:string" name="name"/>
                                          <xs:element type="xs:string" name="value"/>
                                        </xs:sequence>
                                      </xs:complexType>
                                    </xs:element>
                                  </xs:sequence>
                                </xs:complexType>
                              </xs:element>
                            </xs:sequence>
                          </xs:complexType>
                        </xs:element>
                        <xs:element name="site-standard-profile-request">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element type="xs:anyURI" name="url"/>
                            </xs:sequence>
                          </xs:complexType>
                        </xs:element>
                        <xs:element type="xs:anyURI" name="picture-url"/>
                      </xs:sequence>
                    </xs:complexType>
                  </xs:element>
                </xs:schema>
              example: |
                <person>
                  <id>123456</id>
                  <first-name>first name</first-name>
                  <last-name>last name</last-name>
                  <headline>headline</headline>
                  <location>
                    <name>name</name>
                    <country>
                      <code>804</code>
                    </country>
                  </location>
                  <industry>industry</industry>
                  <distance>50</distance>
                  <num-recommenders>10</num-recommenders>
                  <current-status>online</current-status>
                  <current-status-timestamp>12367123678</current-status-timestamp>
                  <connections total="10" />
                  <summary>summary</summary>
                  <positions total="2">
                    <position>
                      <id>id1</id>
                      <title>title1</title>
                      <summary>summary1</summary>
                      <start-date>
                        <year>2013</year>
                        <month>Jan</month>
                      </start-date>
                      <is-current>false</is-current>
                      <company>
                        <name>Company1</name>
                      </company>
                    </position>
                    <position>
                      <id>id2</id>
                      <title>title2</title>
                      <summary>summary2</summary>
                      <start-date>
                        <year>2013</year>
                        <month>Jun</month>
                      </start-date>
                      <is-current>true</is-current>
                      <company>
                        <name>Company2</name>
                      </company>
                    </position>
                  </positions>
                  <member-url-resources>
                    <member-url>
                      <url>http://url1</url>
                      <name>name of url1</name>
                    </member-url>
                    <member-url>
                      <url>http://url2</url>
                      <name>name of url2</name>
                    </member-url>
                  </member-url-resources>
                  <api-standard-profile-request>
                    <url>http://url.com</url>
                    <headers>
                      <http-header>
                        <name>Date</name>
                        <value>237423472sdf</value>
                      </http-header>
                      <http-header>
                        <name>Acept-type</name>
                        <value>*/*</value>
                      </http-header>
                    </headers>
                  </api-standard-profile-request>
                  <site-standard-profile-request>
                    <url>http://url.com</url>
                  </site-standard-profile-request>
                  <picture-url>http://picture.url</picture-url>
                </person>
            application/json:
              schema: |
                {
                    "type":"object",
                    "$schema": "http://json-schema.org/draft-03/schema",
                    "id": "http://jsonschema.net",
                    "required":false,
                    "properties":{
                        "firstName": {
                            "type":"string",
                            "id": "http://jsonschema.net/firstName",
                            "required":false
                        },
                        "headline": {
                            "type":"string",
                            "id": "http://jsonschema.net/headline",
                            "required":false
                        },
                        "lastName": {
                            "type":"string",
                            "id": "http://jsonschema.net/lastName",
                            "required":false
                        },
                        "siteStandardProfileRequest": {
                            "type":"object",
                            "id": "http://jsonschema.net/siteStandardProfileRequest",
                            "required":false,
                            "properties":{
                                "url": {
                                    "type":"string",
                                    "id": "http://jsonschema.net/siteStandardProfileRequest/url",
                                    "required":false
                                }
                            }
                        }
                    }
                }
              example: |
                {
                  "firstName": "First Name",
                  "headline": "developer",
                  "lastName": "Last Name",
                  "siteStandardProfileRequest": {"url": "http://www.linkedin.com/profile/view?id=283834265"}
                }
    /connections{fieldSelectors} :
      displayName: Connections API
      type: fieldSelectors
      get:
        description: |
          Returns a list of 1st degree connections for a user who has granted access to his/her account
        queryParameters:
          start:
            description: |
              Starting location within the result set for paginated returns. Ranges are specified with a starting index and a
              number of results (count) to return.
            type: integer
            minimum: 0
            default: 0
          count:
            description: |
              Ranges are specified with a starting index and a number of results to return. You may specify any number.
              Default and max page size is 500. Implement pagination to retrieve more than 500 connections.
            type: integer
            minimum: 1
            maximum: 500
            default: 500
          modified:
            description: |
              Values are updated or new.
            type: string
            enum: [ updated, new ]
          modified-since:
            description: |
              Value as a Unix time stamp of milliseconds since epoch.
            type: integer
            minimum: 0
            example: 1267401600000
        responses:
          200:
            body:
              text/xml:
                schema: |
                  <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <xs:element name="connections">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element name="person">
                            <xs:complexType>
                              <xs:sequence>
                                <xs:element type="xs:string" name="id"/>
                                <xs:element type="xs:string" name="first-name"/>
                                <xs:element type="xs:string" name="last-name"/>
                                <xs:element type="xs:string" name="headline"/>
                                <xs:element name="location">
                                  <xs:complexType>
                                    <xs:sequence>
                                      <xs:element type="xs:string" name="name"/>
                                      <xs:element name="country">
                                        <xs:complexType>
                                          <xs:sequence>
                                            <xs:element type="xs:short" name="code"/>
                                          </xs:sequence>
                                        </xs:complexType>
                                      </xs:element>
                                    </xs:sequence>
                                  </xs:complexType>
                                </xs:element>
                                <xs:element type="xs:string" name="industry"/>
                                <xs:element name="api-standard-profile-request">
                                  <xs:complexType>
                                    <xs:sequence>
                                      <xs:element type="xs:anyURI" name="url"/>
                                      <xs:element name="headers">
                                        <xs:complexType>
                                          <xs:sequence>
                                            <xs:element name="http-header">
                                              <xs:complexType>
                                                <xs:sequence>
                                                  <xs:element type="xs:string" name="name"/>
                                                  <xs:element type="xs:string" name="value"/>
                                                </xs:sequence>
                                              </xs:complexType>
                                            </xs:element>
                                          </xs:sequence>
                                        </xs:complexType>
                                      </xs:element>
                                    </xs:sequence>
                                  </xs:complexType>
                                </xs:element>
                                <xs:element name="site-standard-profile-request">
                                  <xs:complexType>
                                    <xs:sequence>
                                      <xs:element type="xs:anyURI" name="url"/>
                                    </xs:sequence>
                                  </xs:complexType>
                                </xs:element>
                                <xs:element type="xs:anyURI" name="picture-url"/>
                              </xs:sequence>
                            </xs:complexType>
                          </xs:element>
                        </xs:sequence>
                        <xs:attribute type="xs:short" name="total"/>
                      </xs:complexType>
                    </xs:element>
                  </xs:schema>
                example: |
                  <?xml version='1.0' encoding='UTF-8' standalone='yes'?>
                  <connections total='154'>
                    <person>
                      <id>id</id>
                      <first-name>first name</first-name>
                      <last-name>last name</last-name>
                      <headline>head line</headline>
                      <location>
                        <name>location name</name>
                        <country>
                          <code>804</code>
                        </country>
                      </location>
                      <industry>industry</industry>
                      <api-standard-profile-request>
                        <url>http://profile.linkedin.com</url>
                        <headers>
                          <http-header>
                            <name>Content-Type</name>
                            <value>plain/text</value>
                          </http-header>
                        </headers>
                      </api-standard-profile-request>
                      <site-standard-profile-request>
                        <url>http://profile.linkedin.com</url>
                      </site-standard-profile-request>
                      <picture-url>http://photo.profile.linkedin.com</picture-url>
                    </person>
                  </connections>
              application/json:
                schema: |
                example: |
  /url={publicProfileUrl}{fieldSelectors}:
    displayName: Profile API
    type: fieldSelectors
    uriParameters:
      publicProfileUrl:
        displayName: Profile URL
        type: string
        required: true
    get:
      is: [secureUrlParam]
      description: |
        Returns profile of user by URL
      responses:
        200:
          body:
            text/xml:
              schema: |
                <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <xs:element name="person">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:element type="xs:int" name="id"/>
                        <xs:element type="xs:string" name="first-name"/>
                        <xs:element type="xs:string" name="last-name"/>
                        <xs:element type="xs:string" name="headline"/>
                        <xs:element name="location">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element type="xs:string" name="name"/>
                              <xs:element name="country">
                                <xs:complexType>
                                  <xs:sequence>
                                    <xs:element type="xs:short" name="code"/>
                                  </xs:sequence>
                                </xs:complexType>
                              </xs:element>
                            </xs:sequence>
                          </xs:complexType>
                        </xs:element>
                        <xs:element type="xs:string" name="industry"/>
                        <xs:element type="xs:byte" name="distance"/>
                        <xs:element type="xs:byte" name="num-recommenders"/>
                        <xs:element type="xs:string" name="current-status"/>
                        <xs:element type="xs:long" name="current-status-timestamp"/>
                        <xs:element name="connections">
                          <xs:complexType>
                            <xs:simpleContent>
                              <xs:extension base="xs:string">
                                <xs:attribute type="xs:byte" name="total"/>
                              </xs:extension>
                            </xs:simpleContent>
                          </xs:complexType>
                        </xs:element>
                        <xs:element type="xs:string" name="summary"/>
                        <xs:element name="positions">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element name="position" maxOccurs="unbounded" minOccurs="0">
                                <xs:complexType>
                                  <xs:sequence>
                                    <xs:element type="xs:string" name="id"/>
                                    <xs:element type="xs:string" name="title"/>
                                    <xs:element type="xs:string" name="summary"/>
                                    <xs:element name="start-date">
                                      <xs:complexType>
                                        <xs:sequence>
                                          <xs:element type="xs:short" name="year"/>
                                          <xs:element type="xs:string" name="month"/>
                                        </xs:sequence>
                                      </xs:complexType>
                                    </xs:element>
                                    <xs:element type="xs:string" name="is-current"/>
                                    <xs:element name="company">
                                      <xs:complexType>
                                        <xs:sequence>
                                          <xs:element type="xs:string" name="name"/>
                                        </xs:sequence>
                                      </xs:complexType>
                                    </xs:element>
                                  </xs:sequence>
                                </xs:complexType>
                              </xs:element>
                            </xs:sequence>
                            <xs:attribute type="xs:byte" name="total"/>
                          </xs:complexType>
                        </xs:element>
                        <xs:element name="member-url-resources">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element name="member-url" maxOccurs="unbounded" minOccurs="0">
                                <xs:complexType>
                                  <xs:sequence>
                                    <xs:element type="xs:anyURI" name="url"/>
                                    <xs:element type="xs:string" name="name"/>
                                  </xs:sequence>
                                </xs:complexType>
                              </xs:element>
                            </xs:sequence>
                          </xs:complexType>
                        </xs:element>
                        <xs:element name="api-standard-profile-request">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element type="xs:anyURI" name="url"/>
                              <xs:element name="headers">
                                <xs:complexType>
                                  <xs:sequence>
                                    <xs:element name="http-header" maxOccurs="unbounded" minOccurs="0">
                                      <xs:complexType>
                                        <xs:sequence>
                                          <xs:element type="xs:string" name="name"/>
                                          <xs:element type="xs:string" name="value"/>
                                        </xs:sequence>
                                      </xs:complexType>
                                    </xs:element>
                                  </xs:sequence>
                                </xs:complexType>
                              </xs:element>
                            </xs:sequence>
                          </xs:complexType>
                        </xs:element>
                        <xs:element name="site-standard-profile-request">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element type="xs:anyURI" name="url"/>
                            </xs:sequence>
                          </xs:complexType>
                        </xs:element>
                        <xs:element type="xs:anyURI" name="picture-url"/>
                      </xs:sequence>
                    </xs:complexType>
                  </xs:element>
                </xs:schema>
              example: |
            application/json:
              schema: |
                {
                    "type":"object",
                    "$schema": "http://json-schema.org/draft-03/schema",
                    "id": "http://jsonschema.net",
                    "required":false,
                    "properties":{
                        "firstName": {
                            "type":"string",
                            "id": "http://jsonschema.net/firstName",
                            "required":false
                        },
                        "headline": {
                            "type":"string",
                            "id": "http://jsonschema.net/headline",
                            "required":false
                        },
                        "lastName": {
                            "type":"string",
                            "id": "http://jsonschema.net/lastName",
                            "required":false
                        },
                        "siteStandardProfileRequest": {
                            "type":"object",
                            "id": "http://jsonschema.net/siteStandardProfileRequest",
                            "required":false,
                            "properties":{
                                "url": {
                                    "type":"string",
                                    "id": "http://jsonschema.net/siteStandardProfileRequest/url",
                                    "required":false
                                }
                            }
                        }
                    }
                }
              example: |
                {
                  "firstName": "First Name",
                  "headline": "developer",
                  "lastName": "Last Name",
                  "siteStandardProfileRequest": {"url": "http://www.linkedin.com/profile/view?id=283834265"}
                }
    /connections{fieldSelectors} :
      displayName: Connections API
      type: fieldSelectors
      get:
        description: |
          Returns a list of 1st degree connections for a user who has granted access to his/her account
        queryParameters:
          start:
            description: |
              Starting location within the result set for paginated returns. Ranges are specified with a starting index and a
              number of results (count) to return.
            type: integer
            minimum: 0
            default: 0
          count:
            description: |
              Ranges are specified with a starting index and a number of results to return. You may specify any number.
              Default and max page size is 500. Implement pagination to retrieve more than 500 connections.
            type: integer
            minimum: 1
            maximum: 500
            default: 500
          modified:
            description: |
              Values are updated or new.
            type: string
            enum: [ updated, new ]
          modified-since:
            description: |
              Value as a Unix time stamp of milliseconds since epoch.
            type: integer
            minimum: 0
            example: 1267401600000
        responses:
          200:
            body:
              text/xml:
                schema: |
                  <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <xs:element name="connections">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element name="person">
                            <xs:complexType>
                              <xs:sequence>
                                <xs:element type="xs:string" name="id"/>
                                <xs:element type="xs:string" name="first-name"/>
                                <xs:element type="xs:string" name="last-name"/>
                                <xs:element type="xs:string" name="headline"/>
                                <xs:element name="location">
                                  <xs:complexType>
                                    <xs:sequence>
                                      <xs:element type="xs:string" name="name"/>
                                      <xs:element name="country">
                                        <xs:complexType>
                                          <xs:sequence>
                                            <xs:element type="xs:short" name="code"/>
                                          </xs:sequence>
                                        </xs:complexType>
                                      </xs:element>
                                    </xs:sequence>
                                  </xs:complexType>
                                </xs:element>
                                <xs:element type="xs:string" name="industry"/>
                                <xs:element name="api-standard-profile-request">
                                  <xs:complexType>
                                    <xs:sequence>
                                      <xs:element type="xs:anyURI" name="url"/>
                                      <xs:element name="headers">
                                        <xs:complexType>
                                          <xs:sequence>
                                            <xs:element name="http-header">
                                              <xs:complexType>
                                                <xs:sequence>
                                                  <xs:element type="xs:string" name="name"/>
                                                  <xs:element type="xs:string" name="value"/>
                                                </xs:sequence>
                                              </xs:complexType>
                                            </xs:element>
                                          </xs:sequence>
                                        </xs:complexType>
                                      </xs:element>
                                    </xs:sequence>
                                  </xs:complexType>
                                </xs:element>
                                <xs:element name="site-standard-profile-request">
                                  <xs:complexType>
                                    <xs:sequence>
                                      <xs:element type="xs:anyURI" name="url"/>
                                    </xs:sequence>
                                  </xs:complexType>
                                </xs:element>
                                <xs:element type="xs:anyURI" name="picture-url"/>
                              </xs:sequence>
                            </xs:complexType>
                          </xs:element>
                        </xs:sequence>
                        <xs:attribute type="xs:short" name="total"/>
                      </xs:complexType>
                    </xs:element>
                  </xs:schema>
                example: |
                  <?xml version='1.0' encoding='UTF-8' standalone='yes'?>
                  <connections total='154'>
                    <person>
                      <id>id</id>
                      <first-name>first name</first-name>
                      <last-name>last name</last-name>
                      <headline>head line</headline>
                      <location>
                        <name>location name</name>
                        <country>
                          <code>804</code>
                        </country>
                      </location>
                      <industry>industry</industry>
                      <api-standard-profile-request>
                        <url>http://profile.linkedin.com</url>
                        <headers>
                          <http-header>
                            <name>Content-Type</name>
                            <value>plain/text</value>
                          </http-header>
                        </headers>
                      </api-standard-profile-request>
                      <site-standard-profile-request>
                        <url>http://profile.linkedin.com</url>
                      </site-standard-profile-request>
                      <picture-url>http://photo.profile.linkedin.com</picture-url>
                    </person>
                  </connections>
              application/json:
                schema: |
                example: |
/people-search{fieldSelectors}:
  displayName: People Search API
  type: fieldSelectors
  get:
    description: |
      Returns information about people
    queryParameters:
      keywords:
        description: |
          Members who have all the keywords anywhere in their profile. Use this field when you don't know how to
          more accurately map the input to a more specific parameter. (Don't forget to URL encode this data.)
        type: string
      first-name:
        description: |
          Members with a matching first name. Matches must be exact. Multiple words should be separated by a space.
        type: string
      last-name:
        description: |
          Members with a matching last name. Matches must be exactly. Multiple words should be separated by a space.
        type: string
      company-name:
        description: |
          Members who have a matching company name on their profile. company-name can be combined with the current-company parameter
          to specifies whether the person is or is not still working at the company.

          It's often valuable to not be too specific with the company name. LinkedIn has made great efforts at standardizing company names,
          but including suffixes such as "Inc" and "Company" may overly limit your search, missing people who did not include those suffixes
          on their company names. It's usually better to  search for the basic name of the company and all different versions will be returned.
          This does increase the possibility of a false positive match return, though, so consider the most specific terms you can use.
          For example, consider using "Acme" instead of "Acme, Inc" to find people from a company called Acme, Inc. But this runs the risk
          of finding people from different companies with Acme in the title, such as "Acme Vending" and "Acme Services".
        type: string
      current-company:
        description: |
          Valid values are true or false. A value of true matches members who currently work at the company specified in the company-name parameter.
          A value of false matches members who once worked at the company. Omitting the parameter matches members who currently or once worked
          the company.
        type: boolean
      title:
        description: |
          Matches members with that title on their profile. Works with the current-title parameter.
        type: string
      current-title:
        description: |
          Valid values are true or false. A value of true matches members whose title is currently the one specified in the title-name parameter.
          A value of false matches members who once had that title. Omitting the parameter matches members who currently or once had that title.
        type: boolean
      school-name:
        description: |
          Members who have a matching school name on their profile. school-name can be combined with the current-school parameter to specifies
          whether the person is or is not still at the school.

          It's often valuable to not be too specific with the school name. The same explation provided with company name applies:
          "Yale" vs. "Yale University".
        type: string
      current-school:
        description: |
          Valid values are true or false. A value of true matches members who currently attend the school specified in the school-name parameter.
          A value of false matches members who once attended the school. Omitting the parameter matches members who currently or once attended
          the school.
        type: boolean
      country-code:
        description: |
          Matches members with a location in a specific country. Values are defined in by ISO 3166 standard. Country codes must be in all lower case.
        type: string
      postal-code:
        description: |
          Matches members centered around a Postal Code. Must be combined with the country-code parameter. Not supported for all countries.
        type: string
      distance:
        description: |
          Matches members within a distance from a central point. This is measured in miles. This is best used in combination with both country-code
          and postal-code.
        type: string
      facet:
        description: |
          Facet values to search over.
        type: string
      facets:
        description: |
          Facet buckets to return.
        type: string
      start:
        description: |
          Start location within the result set for paginated returns. This is the zero-based ordinal number of the search return, not the number
          of the page. To see the second page of 10 results per page, specify 10, not 1. Ranges are specified with a starting index and a number
          of results (count) to return. The default value is 0.
        type: integer
        minimum: 0
        default: 0
      count:
        description: |
          The number of profiles to return. Values can range between 0 and 25. The default value is 10. The total results available to any
          user depends on their account level.
        type: integer
        minimum: 0
        maximum: 25
        default: 10
      sort:
        description: |
          Controls the search result order. There are four options:
          * **connections**: Number of connections per person, from largest to smallest.
          * **recommenders**: Number of recommendations per person, from largest to smallest.
          * **distance**: Degree of separation within the member's network, from first degree, then second degree, and then all others mixed together,
            including third degree and out-of-network.
          * **relevance**: Relevance of results based on the query, from most to least relevant.

          By default, results are ordered by the number of connections.
        type: string
        enum: [connections, recommenders, distance, relevance]
        default: connections
    responses:
      200:
        body:
          text/xml:
            schema: |
              <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <xs:element name="people-search">
                  <xs:complexType>
                    <xs:sequence>
                      <xs:element name="people">
                        <xs:complexType>
                          <xs:sequence>
                            <xs:element name="person" maxOccurs="unbounded" minOccurs="0">
                              <xs:complexType>
                                <xs:sequence>
                                  <xs:element type="xs:string" name="id"/>
                                  <xs:element type="xs:string" name="first-name"/>
                                  <xs:element type="xs:string" name="last-name"/>
                                </xs:sequence>
                              </xs:complexType>
                            </xs:element>
                          </xs:sequence>
                          <xs:attribute type="xs:integer" name="total"/>
                          <xs:attribute type="xs:integer" name="count"/>
                          <xs:attribute type="xs:integer" name="start"/>
                        </xs:complexType>
                      </xs:element>
                      <xs:element type="xs:integer" name="num-results"/>
                    </xs:sequence>
                  </xs:complexType>
                </xs:element>
              </xs:schema>
            example: |
              <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
              <people-search>
                <people total="100" count="10" start="0">
                  <person>
                    <id>tePXJ3SX1o</id>
                    <first-name>Clair</first-name>
                    <last-name>Standish</last-name>
                  </person>
                  <person>
                    <id>pcfBxmL_Vv</id>
                    <first-name>John</first-name>
                    <last-name>Bender</last-name>
                  </person>
                </people>
                <num-results>108</num-results>
              </people-search>
          application/json:
            schema: |
            example: |
/groups:
  displayName: Groups API
  /{groupId}{fieldSelectors}:
    type: fieldSelectors
    uriParameters:
      groupId:
        displayName: Numeric group ID
        description: |
          The unique identifier for a LinkedIn group
        type: integer
        required: true
    get:
      description: |
        Returns Group's Profile Details
      responses:
        200:
          body:
            text/xml:
              schema: |
                <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <xs:element name="group">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:element type="xs:int" name="id"/>
                        <xs:element type="xs:string" name="name"/>
                        <xs:element type="xs:string" name="short-description"/>
                        <xs:element type="xs:string" name="description"/>
                        <xs:element name="relation-to-viewer">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element type="xs:string" name="membership-state"/>
                              <xs:element type="xs:string" name="available-actions"/>
                            </xs:sequence>
                          </xs:complexType>
                        </xs:element>
                        <xs:element type="xs:string" name="posts"/>
                        <xs:element type="xs:byte" name="counts-by-category"/>
                        <xs:element type="xs:string" name="is-open-to-non-members"/>
                        <xs:element type="xs:string" name="category"/>
                        <xs:element type="xs:anyURI" name="website-url"/>
                        <xs:element type="xs:string" name="locale"/>
                        <xs:element name="location">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element type="xs:string" name="name"/>
                              <xs:element name="country">
                                <xs:complexType>
                                  <xs:sequence>
                                    <xs:element type="xs:short" name="postal-code"/>
                                  </xs:sequence>
                                </xs:complexType>
                              </xs:element>
                            </xs:sequence>
                          </xs:complexType>
                        </xs:element>
                        <xs:element type="xs:string" name="allow-member-invites"/>
                        <xs:element type="xs:anyURI" name="site-group-url"/>
                        <xs:element type="xs:anyURI" name="small-logo-url"/>
                        <xs:element type="xs:anyURI" name="large-logo-url"/>
                      </xs:sequence>
                    </xs:complexType>
                  </xs:element>
                </xs:schema>
              example: |
                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                <group>
                  <id>5161023</id>
                  <name>group name</name>
                  <short-description>short description</short-description>
                  <description>description</description>
                  <relation-to-viewer>
                    <membership-state>state</membership-state>
                    <available-actions>state</available-actions>
                  </relation-to-viewer>
                  <posts>none</posts>
                  <counts-by-category>25</counts-by-category>
                  <is-open-to-non-members>false</is-open-to-non-members>
                  <category>category</category>
                  <website-url>http://pragmasoft.com.ua</website-url>
                  <locale>en-US</locale>
                  <location>
                    <name>name</name>
                    <country>
                      <postal-code>804</postal-code>
                    </country>
                  </location>
                  <allow-member-invites>true</allow-member-invites>
                  <site-group-url>http://site.group.com</site-group-url>
                  <small-logo-url>http://small.logo.com</small-logo-url>
                  <large-logo-url>http://large.logo.com</large-logo-url>
                </group>
            application/json:
              schema: |
              example: |
    /posts:
      type: fieldSelectors
      get:
        description: |
          Returns a Group's Discussion Posts
        queryParameters:
          count:
            description: |
              Number of records to return. Supported for posts and post/comments.
            type: integer
            minimum: 0
          start:
            description: |
              Record index to start pagination. Supported for posts and post/comments.
            type: integer
            minimum: 0
            default: 0
          order:
            description: |
              Sort order for posts.
            type: string
            enum: [ recency, popularity ]
          role:
            description: |
              Filter for posts related to the caller. Valid only for group-memberships/{id}/posts resource.
            type: string
            enum: [ creator, commenter, follower ]
          category:
            description: |
              Category of posts.
            type: string
            enum: [ discussion ]
          modified-since:
            description: |
              Timestamp filter for posts created after the specified value.
            type: integer
            example: 1302727083000
        responses:
          200:
            body:
              text/xml:
                schema: |
                  <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                    <xs:element name="posts">
                      <xs:complexType>
                        <xs:sequence>
                          <xs:element name="post">
                            <xs:complexType>
                              <xs:sequence>
                                <xs:element type="xs:string" name="id"/>
                                <xs:element name="type">
                                  <xs:complexType>
                                    <xs:sequence>
                                      <xs:element type="xs:string" name="code"/>
                                    </xs:sequence>
                                  </xs:complexType>
                                </xs:element>
                                <xs:element name="creator">
                                  <xs:complexType>
                                    <xs:sequence>
                                      <xs:element type="xs:string" name="id"/>
                                      <xs:element type="xs:string" name="first-name"/>
                                      <xs:element type="xs:string" name="last-name"/>
                                      <xs:element type="xs:string" name="headline"/>
                                    </xs:sequence>
                                  </xs:complexType>
                                </xs:element>
                                <xs:element type="xs:string" name="title"/>
                              </xs:sequence>
                            </xs:complexType>
                          </xs:element>
                        </xs:sequence>
                        <xs:attribute type="xs:byte" name="total"/>
                      </xs:complexType>
                    </xs:element>
                  </xs:schema>
                example: |
                  <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                  <posts total="1">
                    <post>
                      <id>g-5161023-S-270459579</id>
                      <type>
                        <code>standard</code>
                      </type>
                      <creator>
                        <id>AGBKeo0Eup</id>
                        <first-name>first name</first-name>
                        <last-name>second name</last-name>
                        <headline>developer</headline>
                      </creator>
                      <title>first message</title>
                    </post>
                  </posts>
              application/json:
                schema: |
                example: |
/posts:
  displayName: Groups API
  /{postId}{fieldSelectors}:
    type: fieldSelectors
    uriParameters:
      postId:
        displayName: Post ID
        description: |
          The unique identifier for a post
        type: string
        required: true
    get:
      description: |
        Returns Discussion Post
      responses:
        200:
          body:
            text/xml:
              schema: |
                <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <xs:element name="post">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:element type="xs:string" name="id"/>
                        <xs:element name="parent-group">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element type="xs:int" name="id"/>
                              <xs:element type="xs:string" name="name"/>
                            </xs:sequence>
                          </xs:complexType>
                        </xs:element>
                        <xs:element name="type">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element type="xs:string" name="code"/>
                            </xs:sequence>
                          </xs:complexType>
                        </xs:element>
                        <xs:element name="creator">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element type="xs:string" name="id"/>
                              <xs:element type="xs:string" name="first-name"/>
                              <xs:element type="xs:string" name="last-name"/>
                              <xs:element type="xs:string" name="headline"/>
                            </xs:sequence>
                          </xs:complexType>
                        </xs:element>
                        <xs:element type="xs:string" name="title"/>
                      </xs:sequence>
                    </xs:complexType>
                  </xs:element>
                </xs:schema>
              example: |
                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                <post>
                  <id>g-5161023-S-270459579</id>
                  <parent-group>
                    <id>5161023</id>
                    <name>pragmasoft group</name>
                  </parent-group>
                  <type>
                    <code>standard</code>
                  </type>
                  <creator>
                    <id>AGBKeo0Eup</id>
                    <first-name>first name</first-name>
                    <last-name>last name</last-name>
                    <headline>developer</headline>
                  </creator>
                  <title>first message</title>
                </post>
            application/json:
              schema: |
              example: |
    delete:
      description: |
        Deletes a Post
      responses:
        200:
          description: OK
  #TODO: implement  /comments{fieldSelectors}:
  #TODO: implement  /relation-to-viewer:
  #TODO: implement  /category:
/comments:
  /{commentId}{fieldSelectors}:
    type: fieldSelectors
    uriParameters:
      commentId:
        displayName: Comment ID
        description: |
          The unique identifier for a comment
        type: integer
        required: true
    get:
      description: |
        Returns Comments
      responses:
        200:
          body:
            text/xml:
              schema: |
              example: |
            application/json:
              schema: |
              example: |
    delete:
      description: |
        Deletes a Comment
      responses:
        200:
          description: OK
/jobs:
  displayName: Job Lookup API
  /{jobId}{fieldSelectors}:
    type: fieldSelectors
    uriParameters:
      jobId:
        displayName: Job ID
        description: |
          The unique identifier for a job.
        type: string
        required: true
    get:
      description: |
        Returns Job info
      responses:
        200:
          body:
            text/xml:
              schema: |
                <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                  <xs:element name="job">
                    <xs:complexType>
                      <xs:sequence>
                        <xs:element type="xs:int" name="id"/>
                        <xs:element type="xs:long" name="expiration-timestamp"/>
                        <xs:element name="company">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element type="xs:int" name="id"/>
                              <xs:element type="xs:string" name="name"/>
                            </xs:sequence>
                          </xs:complexType>
                        </xs:element>
                        <xs:element name="position">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element type="xs:string" name="title"/>
                              <xs:element name="location">
                                <xs:complexType>
                                  <xs:sequence>
                                    <xs:element type="xs:string" name="name"/>
                                    <xs:element name="country">
                                      <xs:complexType>
                                        <xs:sequence>
                                          <xs:element type="xs:string" name="code"/>
                                        </xs:sequence>
                                      </xs:complexType>
                                    </xs:element>
                                  </xs:sequence>
                                </xs:complexType>
                              </xs:element>
                            </xs:sequence>
                          </xs:complexType>
                        </xs:element>
                        <xs:element type="xs:string" name="location-description"/>
                        <xs:element name="job-poster">
                          <xs:complexType>
                            <xs:sequence>
                              <xs:element type="xs:string" name="id"/>
                              <xs:element type="xs:string" name="first-name"/>
                              <xs:element type="xs:string" name="last-name"/>
                              <xs:element type="xs:string" name="headline"/>
                            </xs:sequence>
                          </xs:complexType>
                        </xs:element>
                      </xs:sequence>
                    </xs:complexType>
                  </xs:element>
                </xs:schema>
              example: |
                <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
                <job>
                  <id>1511685</id>
                        <expiration-timestamp>1304030488000</expiration-timestamp>
                        <company>
                                <id>229433</id>
                                <name>Cloudera</name>
                        </company>
                        <position>
                                <title>Technical Writer</title>
                                <location>
                                        <name>San Francisco Bay Area</name>
                                        <country>
                                                <code>us</code>
                                        </country>
                                </location>
                        </position>
                        <location-description>San Francisco or Palo Alto, CA</location-description>
                        <job-poster>
                                <id>hQ4ruu3J2q</id>
                                <first-name>Paul</first-name>
                                <last-name>Battaglia</last-name>
                                <headline>Technical Writer at Cloudera</headline>
                        </job-poster>
                </job>
            application/json:
              schema: |
              example: |
/job-search{fieldSelectors}:
  displayName: Job Search API
  type: fieldSelectors
  get:
    description: |
      Returns Jobs found by some criteria
    responses:
      200:
        body:
          text/xml:
            schema: |
              <xs:schema attributeFormDefault="unqualified" elementFormDefault="qualified" xmlns:xs="http://www.w3.org/2001/XMLSchema">
                <xs:element name="job-search">
                  <xs:complexType>
                    <xs:sequence>
                      <xs:element name="jobs">
                        <xs:complexType>
                          <xs:sequence>
                            <xs:element name="job" maxOccurs="unbounded" minOccurs="0">
                              <xs:complexType>
                                <xs:sequence>
                                  <xs:element type="xs:int" name="id"/>
                                  <xs:element name="position">
                                    <xs:complexType>
                                      <xs:sequence>
                                        <xs:element name="location">
                                          <xs:complexType>
                                            <xs:sequence>
                                              <xs:element type="xs:string" name="name"/>
                                              <xs:element name="country">
                                                <xs:complexType>
                                                  <xs:sequence>
                                                    <xs:element type="xs:string" name="code"/>
                                                  </xs:sequence>
                                                </xs:complexType>
                                              </xs:element>
                                            </xs:sequence>
                                          </xs:complexType>
                                        </xs:element>
                                      </xs:sequence>
                                    </xs:complexType>
                                  </xs:element>
                                  <xs:element name="job-poster">
                                    <xs:complexType>
                                      <xs:sequence>
                                        <xs:element type="xs:string" name="first-name"/>
                                        <xs:element type="xs:string" name="last-name"/>
                                        <xs:element name="relation-to-viewer">
                                          <xs:complexType>
                                            <xs:sequence>
                                              <xs:element type="xs:byte" name="distance"/>
                                            </xs:sequence>
                                          </xs:complexType>
                                        </xs:element>
                                      </xs:sequence>
                                    </xs:complexType>
                                  </xs:element>
                                  <xs:element name="posting-date">
                                    <xs:complexType>
                                      <xs:sequence>
                                        <xs:element type="xs:short" name="year"/>
                                        <xs:element type="xs:byte" name="month"/>
                                        <xs:element type="xs:byte" name="day"/>
                                      </xs:sequence>
                                    </xs:complexType>
                                  </xs:element>
                                </xs:sequence>
                              </xs:complexType>
                            </xs:element>
                          </xs:sequence>
                          <xs:attribute type="xs:byte" name="count"/>
                          <xs:attribute type="xs:byte" name="start"/>
                        </xs:complexType>
                      </xs:element>
                    </xs:sequence>
                  </xs:complexType>
                </xs:element>
              </xs:schema>
            example: |
              <?xml version="1.0" encoding="UTF-8" standalone="yes"?>
              <job-search>
                <jobs count="3" start="0">
                  <job>
                    <id>1550983</id>
                    <position>
                      <location>
                        <name>San Francisco Bay Area</name>
                        <country>
                          <code>us</code>
                        </country>
                      </location>
                    </position>
                    <job-poster>
                      <first-name>David</first-name>
                      <last-name>Sides</last-name>
                      <relation-to-viewer>
                        <distance>-1</distance>
                      </relation-to-viewer>
                    </job-poster>
                    <posting-date>
                      <year>2011</year>
                      <month>4</month>
                      <day>14</day>
                    </posting-date>
                  </job>
                  <job>
                    <id>1550465</id>
                    <position>
                      <location>
                        <name>San Francisco Bay Area</name>
                        <country>
                          <code>us</code>
                        </country>
                      </location>
                    </position>
                    <job-poster>
                      <first-name>Jeanmarie</first-name>
                      <last-name>Boben</last-name>
                      <relation-to-viewer>
                        <distance>3</distance>
                      </relation-to-viewer>
                    </job-poster>
                    <posting-date>
                      <year>2011</year>
                      <month>4</month>
                      <day>14</day>
                    </posting-date>
                  </job>
                  <job>
                    <id>1549868</id>
                    <position>
                      <location>
                        <name>San Francisco Bay Area</name>
                        <country>
                          <code>us</code>
                        </country>
                      </location>
                    </position>
                    <job-poster>
                      <first-name>Anne</first-name>
                      <last-name>Woods, CPA</last-name>
                      <relation-to-viewer>
                        <distance>3</distance>
                      </relation-to-viewer>
                    </job-poster>
                    <posting-date>
                      <year>2011</year>
                      <month>4</month>
                      <day>14</day>
                    </posting-date>
                  </job>
                </jobs>
              </job-search>
          application/json:
            schema: |
            example: |
#TODO: add Companies, Job Posting, Share and Social Stream, Communications sections
